/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.26).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.rt.rest.api;

import com.rt.model.Address;
import com.rt.model.Person;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-06-21T12:07:11.065206+01:00[Europe/Dublin]")
@Validated
public interface PersonApi {

    @Operation(summary = "add address to person", description = "", tags={ "person" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation") })
    @RequestMapping(value = "/api/v1/person/{personId}/addAddress",
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Void> addAddressToPerson(@Parameter(in = ParameterIn.PATH, description = "ID of person to add address", required=true, schema=@Schema()) @PathVariable("personId") Integer personId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Address body);


    @Operation(summary = "delete person", description = "", tags={ "person" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation"),

            @ApiResponse(responseCode = "404", description = "entity not found")})
    @RequestMapping(value = "/api/v1/person/{personId}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePerson(@Parameter(in = ParameterIn.PATH, description = "ID of person to delete person", required=true, schema=@Schema()) @PathVariable("personId") Integer personId);


    @Operation(summary = "get all persons", description = "Returns all persons", tags={ "person" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Person.class)))) })
    @RequestMapping(value = "/api/v1/person/getAll",
            produces = {  "application/json", "application/xml" },
            method = RequestMethod.GET)
    ResponseEntity<List<Person>> getAllPerson();


    @Operation(summary = "get person", description = "", tags={ "person" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Person.class))),
            @ApiResponse(responseCode = "404", description = "not found")
    })
    @RequestMapping(value = "/api/v1/person/{personId}",
            produces = {  "application/json", "application/xml" },
            method = RequestMethod.GET)
    ResponseEntity<Person> getPerson(@Parameter(in = ParameterIn.PATH, description = "ID of person to get person", required=true, schema=@Schema()) @PathVariable("personId") Integer personId);


    @Operation(summary = "create person", description = "save a person", tags={ "person" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "created") })
    @RequestMapping(value = "/api/v1/person",
            consumes = {  "application/json", "application/xml" },
            method = RequestMethod.POST)
    ResponseEntity<Void> savePerson(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Person body);


    @Operation(summary = "update person", description = "edit a person", tags={ "person" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "created"),

            @ApiResponse(responseCode = "200", description = "updated") })
    @RequestMapping(value = "/api/v1/person",
            consumes = {  "application/json", "application/xml" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> updatePerson(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Person body);

}

