/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.26).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.rt.rest.api;

import com.rt.model.Address;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-06-21T12:07:11.065206+01:00[Europe/Dublin]")
@Validated
public interface AddressApi {

    @Operation(summary = "delete address", description = "", tags={ "address" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation") })
    @RequestMapping(value = "/api/v1/address/{addressId}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAddress(@Parameter(in = ParameterIn.PATH, description = "ID of address to delete address", required=true, schema=@Schema()) @PathVariable("addressId") Integer addressId);


    @Operation(summary = "get address", description = "", tags={ "address" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Address.class))),
            @ApiResponse(responseCode = "404", description = "not found")
    })
    @RequestMapping(value = "/api/v1/address/{addressId}",
            produces = {  "application/json", "application/xml" },
            method = RequestMethod.GET)
    ResponseEntity<Address> getAddress(@Parameter(in = ParameterIn.PATH, description = "ID of address to get address", required=true, schema=@Schema()) @PathVariable("addressId") Integer addressId);


    @Operation(summary = "get all addresses", description = "Returns all addresses", tags={ "address" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Address.class)))) })
    @RequestMapping(value = "/api/v1/address/getAll",
            produces = {  "application/json", "application/xml" },
            method = RequestMethod.GET)
    ResponseEntity<List<Address>> getAllAddress();


    @Operation(summary = "update address", description = "edit a address", tags={ "address" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "406", description = "entity creation not acceptable"),

            @ApiResponse(responseCode = "200", description = "updated") })
    @RequestMapping(value = "/api/v1/address",
            consumes = { "application/json", "application/xml" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateAddress(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Address body);

}

